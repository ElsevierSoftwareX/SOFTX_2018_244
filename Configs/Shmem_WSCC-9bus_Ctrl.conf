stats = 1;

logging = {
	level = "info";
}

nodes = {
	broker1 = {
		type = "mqtt",
		format = "csv",
		username = "villas",
        password = "s3c0sim4!",
		host = "137.226.248.91",
		in = {
            subscribe = "villas-dpsim1",
			hooks = (
				{ type = "stats" }
			)
        },
        out = {
            publish = "dpsim1-villas"
        }		
	},
	dpsim1 = {
		type = "shmem",
		in = {
            name = "/dpsim1-villas",	# Name of shared memory segment for sending side
			hooks = (
				{ type = "stats" }
			),
			signals = {
				count = 64,
				type = "float"
			}
        },
        out = {
            name = "/villas-dpsim1"	# Name of shared memory segment for receiving side
        },				
		queuelen = 1024,	# Length of the queues
		polling = true,		# We can busy-wait or use pthread condition variables for synchronizations
	},
#	profile = {
#		type = "file",
#		format = "csv", 
#		uri = "/projects/reserve/Load_profile_sum.csv",
#		in = {
#			rate = 1,
#			eof = "rewind"
#		}
#	},
#	oscilloscope = {
#		type = "socket",
#		layer = "udp",
#		format = "protobuf",
#		in = {
#            address = "*:12000"
#        }
#        out = {
#            address = "134.130.169.31:12000"
#        }
#	},
#	lo = {
#		type = "loopback"	
#	},
#	web = {
#		type = "websocket"
#	}
}

paths = (
	{
		in = "dpsim1",
		out = [ "broker1" ],
		hooks = (
			{
				type = "limit_rate",
				rate = 50
			}
		)
	},
#	{
#		in = [
#			"broker1.data[0]",
#			"profile.data[0]"
#		],
#		out = "dpsim1",		
#		hooks = (
#			{
#				type = "limit_rate",
#				rate = 50
#			}
#		)
#	},
#	{
#		in = [ "lo.data[8]", "lo.data[10]" ],
#		out = "oscilloscope",
#		hooks = (
#			{ type = "scale", scale = 0.0008, offset = -180 },
#			{ type = "print" }
#		)
#	}
)
